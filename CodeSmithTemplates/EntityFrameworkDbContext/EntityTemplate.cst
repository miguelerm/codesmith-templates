<%@ Template Language="C#" TargetLanguage="C#" Debug="True" %>

<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Linq" %>

<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="DataSource" Optional="False" Description="Database Table" %>
<%@ Property Name="EntitiesNamespace" Type="String" Category="Code" Optional="True" %>
<%
EntitiesNamespace = String.IsNullOrWhiteSpace(EntitiesNamespace) ? "Entities" : EntitiesNamespace;
var className = RegisterName(GetEntityName(Table.Name));
%>
<script runat="template">

    private System.Collections.Generic.Dictionary<string, int> usedNames = new System.Collections.Generic.Dictionary<string, int>();
    
    private string RegisterName(string name)
    {
        if (usedNames.ContainsKey(name))
        {
            usedNames[name]++;
            return name + usedNames[name];
        }
        else
        {
            usedNames[name] = 0;
            return name;
        }
    }
    private string GetEntityName(string name)
    {
        return name.ToCSharpIdentifier().ToPascalCase();
    }
    
    private string Order(ColumnSchema column, int index)
    {
        return column.IsPrimaryKeyMember || column.IsForeignKeyMember ? ", Order = " + index : null;
    }
</script>
//------------------------------------------------------------------------------
// <autogenerated>
//     Este código fue generado por una plantilla de CodeSmith.
//
//     NO MODIFIQUE el contenido de este archivo. Los cambios a este
//     archivo se perderán si el código es generado de nuevo.
// </autogenerated>
//------------------------------------------------------------------------------

namespace <%= EntitiesNamespace %>
{
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    /// <summary>
    <% if (!String.IsNullOrWhiteSpace(Table.Description)) { %>
    /// <%= Table.Description.Replace("\r\n", "").Replace("\n", "").Replace("\r", "") %>
    <% } else { %>
    /// Entidad que representa la información persistida en la tabla <strong><%= Table.Name %></strong>.
    <% } %>
    /// </summary>
    [Table("<%= Table.Name %>")]
    public class <%= className %>
    {
        <% for(var index = 0; index < Table.Columns.Count; index++) { var column = Table.Columns[index]; var propertyName = RegisterName(column.Name.ToCSharpIdentifier().ToPascalCase()); %>
        /// <summary>
        <% if (String.IsNullOrWhiteSpace(column.Description)) { %>
        /// Obtiene o establece el valor de <strong><%= column.Name %></strong>.
        <% } else { %>
        /// <%= column.Description %>
        <% } %>
        /// </summary><% if (column.IsPrimaryKeyMember) { %>
        [Key]<% } %><% if (!column.AllowDBNull) { %>
        [Required]<% } %>
        [Column("<%= column.Name %>"<%= Order(column, index) %>)]<% if (column.SystemType.Name == "String") { %>
        [StringLength(<%= column.Size %>)]<% } %>
        public <%= column.SystemType.Name + (column.AllowDBNull && !column.SystemType.IsClass ? "?" : null) %> <%= propertyName %> { get; set; }
        
        <% } %>
        <% foreach(var foreignKey in Table.ForeignKeys) { var propertyForeignKeyName = RegisterName(GetEntityName(foreignKey.PrimaryKeyTable.Name)); %>
        /// <summary>
        /// Obtiene o establece el registro asociado de la tabla <strong><%= foreignKey.PrimaryKeyTable.Name %></strong> con la columna <strong><%= foreignKey.ForeignKeyMemberColumns.First().Name %></strong>.
        /// </summary>
        [ForeignKey("<%= foreignKey.ForeignKeyMemberColumns.First().Name.ToCSharpIdentifier().ToPascalCase()  %>")]
        public <%= GetEntityName(foreignKey.PrimaryKeyTable.Name) %> <%= propertyForeignKeyName %> { get; set; }
        
        <% } %>
    }
}